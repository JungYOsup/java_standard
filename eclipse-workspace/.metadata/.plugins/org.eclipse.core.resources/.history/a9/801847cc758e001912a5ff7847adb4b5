import java.util.Arrays;

//1.정렬 : 버블정렬 , 선택정렬, 삽입정렬 , 퀵정렬 , 병합정렬 //끝
//2.Heap , 계수정렬  //
//3.Stack , 너비우선탐색, 깊이우선탐색, 
//4.크루스칼 알고리즘 , 이진트리의 구현과 순화 , Dynamic Programming

public class Practice {

	public static void main(String[] args) {

		int[] array = {3,2,1,5,4};
		int[] array2 = {5,4,2,7,6,1,3};
		int[] array3 = {7,4,2,5,3,1,9};
		int[] array4 = {8,2,3,1,4,5,6,9};
		int[] array5 = {5,4,2,1,3};
		int[] array6 = {7,6,8,3,5,9,10};

		//		Bubble_Sort(array);
		//		System.out.println();
		//		Selection_Sort(array2);
		//		System.out.println();
		//		Insert_Sort(array3);
		//		System.out.println();
		//		Quick_sort(array4, 0, array4.length-1);
		//
		//		for(int k : array4) {
		//			System.out.print(k);
		//		}
		//		System.out.println();
		//		Merge(array5, 0, array5.length-1);
		//		for(int k : array5) {
		//			System.out.print(k);
		//		}

		Heap_Sort(array6);

		for(int k : array6) {
			System.out.print(k);
		}


	}

	public static void Bubble_Sort(int[] array) {

		for(int i=0; i<array.length; i++) {
			for(int j=0; j<array.length-i-1; j++) {
				if(array[j]>array[j+1]) {
					int temp = array[j];
					array[j] = array[j+1];
					array[j+1] = temp;
				}
			}
		}


		for(int k : array) {
			System.out.print(k);
		}
	}

	public static void Selection_Sort(int[] array) {

		int min;
		int index=0;

		for(int i=0; i<array.length; i++) {
			min =9999;
			for(int j=i; j<array.length; j++)
				if(array[j]<min) {
					min = array[j];
					index = j;
				}

			int temp = array[i];
			array[i] = array[index];
			array[index] = temp;

		}

		for(int k : array) {
			System.out.print(k);
		}

	}

	//이미 정렬된 상태에서 좋은 정렬 기법 
	public static void Insert_Sort(int[] array) {


		for(int i=1; i<array.length; i++) {

			for(int j=i; j>0; j--) {

				if(array[j]<array[j-1]) {
					int temp = array[j];
					array[j] = array[j-1];
					array[j-1] = temp;
				}
			}
		}

		for(int k : array) {
			System.out.print(k);
		}


	}
	public static void Quick_sort(int[] array,int start , int end) {



		int pivot = start;
		int i = start+1;
		int j = end;

		if(i>j) {
			return;
		}

		while(i<=j) {

			while(i<j&&array[pivot]>array[i]) {
				i++;
			}
			while(j>=0&&array[pivot]<array[j]) {
				j--;
			}

			if(i<j) {

				int temp = array[i];
				array[i] = array[j];
				array[j] = temp;

			}else {

				int temp = array[pivot];
				array[pivot] = array[j];
				array[j] = temp;

			}

			Quick_sort(array, 0, j-1);
			Quick_sort(array, j+1, end);

		}


	}

	static int num = 100;
	static int[] sorted= new int[num];

	public static void Merge(int[] array,int start , int end) {


		if(start<end) {

			int middle = (start+end)/2;

			Merge(array, start, middle);
			Merge(array, middle+1, end);

			Merge_Sort(array,start,middle,end);
		}




	}

	public static void Merge_Sort(int[] array, int start ,int middle, int end) {

		int i = start;
		int j = middle+1;
		int k = start;

		while(i<=middle&&j<=end) {

			if(array[i]<=array[j]) {
				sorted[k]=array[i];
				i++;
			}else {
				sorted[k]=array[j];
				j++;
			}
			k++;

		}

		if(i>middle) {
			for(int t=j; t<=end; t++) {
				sorted[k] = array[t];
				k++;
			}
		}else{
			for(int t=i; t<=middle; t++) {
				sorted[k] = array[t];
				k++;
			}
		}


		for(int t=0; t<=end; t++) {
			array[t] = sorted[t];
		}


	}

	public static void Heap_Sort(int[] array) {


		//Heap 알고리즘 
		for(int i=1; i<array.length; i++) {

			int c = i;
			do {

				int root = (c-1)/2;
				if(array[root]<array[c]) {
					int temp = array[root];
					array[root] = array[c];
					array[c] = temp;
				}
				c = root;

			}while(c!=0);

		}


		//Heap 

		for(int i=array.length-1; i>=0; i--) {

			int temp = array[i];
			array[i] = array[0];
			array[0] = temp;

			int root = 0;
			int c = 1;

			do {
				c=root*2+1;
				
				if(c<i-1&&array[c]<array[c+1]) {
					c++;
				}

				if(c<i&&array[root]<array[c]) {
					int temp2 = array[c];
					array[c] = array[root];
					array[root] = temp2;
				}

				root = c;

			}while(c<i);

		}


	}
	
	public static void Calculation_Sort(int[] array) {
		
		int[] cal_sort = new int[array.length];
		
	}

}
